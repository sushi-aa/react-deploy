{"version":3,"sources":["AnimatedText.module.css","logo.svg","AnimatedText.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AnimatedText","textColor","overlayColor","children","props","containerElem","useRef","initialMousePos","x","y","useState","mousePos","setMousePos","className","classes","animatedTextContainer","style","onMouseMove","event","nativeEvent","elem","current","newX","offsetX","clientWidth","newY","offsetY","clientHeight","onMouseOut","ref","color","animatedTextContent","animatedTextContentClone","App","loop","Infinity","wrapper","steps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,sBAAwB,4CAA4C,oBAAsB,0CAA0C,yBAA2B,yF,4ECDjLD,EAAOC,QAAU,IAA0B,kC,sJCIrCC,EAAe,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,SAAaC,EAAY,uDAClEC,EAAgBC,iBAAO,MACvBC,EAAkB,CAAEC,EAAG,EAAGC,EAAG,GAFqC,EAIxCC,mBAASH,GAJ+B,mBAIjEI,EAJiE,KAIvDC,EAJuD,KAoBxE,OACE,2CACEC,UAAWC,IAAQC,sBACnBC,MAAO,CACL,UAAWL,EAASH,EACpB,UAAWG,EAASF,GAEtBQ,YArBoB,SAAAC,GACtBA,EAAQA,EAAMC,YACd,IAAMC,EAAOf,EAAcgB,QACrBC,EAAQJ,EAAMK,QAAUH,EAAKI,YAAe,IAC5CC,EAAQP,EAAMQ,QAAUN,EAAKO,aAAgB,IAKnDf,EAJoB,CAClBJ,EAAGc,EACHb,EAAGgB,KAeHG,WAVmB,kBAAMhB,EAAYL,IAWrCsB,IAAKxB,GACDD,GAEJ,wBACEY,MAAO,CAAEc,MAAO7B,GAChBY,UAAWC,IAAQiB,qBAElB5B,GAEH,wBACEa,MAAO,CAAEc,MAAO5B,GAChBW,UAAWC,IAAQkB,0BAElB7B,KCRM8B,MA/Bf,WACE,OACE,oCACA,sDAIA,mCACU,IACN,kBAAC,IAAD,CACEC,KAAMC,IACNC,QAAQ,IACRC,MAAO,CACL,wBAAyB,IACzB,iBAAkB,IAClB,kCAAmC,IACnC,8BAA+B,QAKvC,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAAcZ,UAAU,UAAUC,aAAa,WAA/C,oBCjBcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61e26ab1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"animatedTextContainer\":\"AnimatedText_animatedTextContainer__2zkE6\",\"animatedTextContent\":\"AnimatedText_animatedTextContent__20r76\",\"animatedTextContentClone\":\"AnimatedText_animatedTextContentClone__2uZPI AnimatedText_animatedTextContent__20r76\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from \"react\";\n\nimport classes from \"./AnimatedText.module.css\";\n\nconst AnimatedText = ({ textColor, overlayColor, children, ...props }) => {\n  const containerElem = useRef(null);\n  const initialMousePos = { x: 0, y: 0 };\n\n  const [mousePos, setMousePos] = useState(initialMousePos);\n  \n  const handleMouseMove = event => {\n    event = event.nativeEvent;\n    const elem = containerElem.current;\n    const newX = (event.offsetX / elem.clientWidth) * 100;\n    const newY = (event.offsetY / elem.clientHeight) * 100;\n    const newMousePos = {\n      x: newX,\n      y: newY\n    };\n    setMousePos(newMousePos);\n  };\n\n  const handleMouseOut = () => setMousePos(initialMousePos);\n\n  return (\n    <section\n      className={classes.animatedTextContainer}\n      style={{\n        \"--maskX\": mousePos.x,\n        \"--maskY\": mousePos.y\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseOut={handleMouseOut}\n      ref={containerElem}\n      {...props}\n    >\n      <h1\n        style={{ color: textColor }}\n        className={classes.animatedTextContent}\n      >\n        {children}\n      </h1>\n      <h1\n        style={{ color: overlayColor }}\n        className={classes.animatedTextContentClone}\n      >\n        {children}\n      </h1>\n    </section>\n  );\n};\n\nexport { AnimatedText };","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Typical from 'react-typical';\n//import Title from './Title';\nimport {AnimatedText} from \"./AnimatedText\";\n\nfunction App() {\n  return (\n    <>\n    <div>\n      HELLO! THIS IS A TEST\n    </div>\n    \n    <p>\n        I am {' '}\n        <Typical\n          loop={Infinity}\n          wrapper='b'\n          steps={[\n            'just trying this out ', 2000,\n            'experimenting ', 2000,\n            'creating a website on gh pages ', 2000,\n            'doing a typerwriter effect ', 2000,\n          ]}\n        />\n      </p>\n\n    <div className=\"App\">\n      <AnimatedText textColor=\"#ffffff\" overlayColor=\"#bb23fe\" >\n        HOVER OVER ME\n      </AnimatedText>\n    </div>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}